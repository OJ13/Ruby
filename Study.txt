# RUBY

Instalação

Existem várias maneiras de instalar, podemos utilizar ferramentas.
Entrando no site oficial do Ruby, tem os modos de instalação para 
cada sistema operacional. (https://rubyinstaller.org/), após o ruby
instalado, com o comando 'ruby' no terminal conseguimos executar arquivos
da extensão '.rb'

Podemos usar para estudo
- CodeAnyWhere (Ruby on-line para estudo)

IRB
Quando instalamos o Ruby, ele trás junto de si o 'irb', o mesmo pode
ser usado para testar comandos dentro do terminal
só inicializar ele com o comando -> irb . E pronto só utilizar dentro 
do proprio terminal.

Tipos de Dados
Int, float, boolean, string, array,
SYMBOL - igual a string com a diferença que ele é imutável, você atribui ele, sem as 
aspas , voce incia o texto com dois pontos. caso voce coloque o mesmo texto em variaveis
diferentes em symbol, ela aponta para o mesmo local na memória
HASH - semelhante a array, porém representado com {}.
No ruby não é preciso definir o tipo de dado antes de atribuir um valor
a uma variavel, ele é definido dinâmicamente de acordo com que é atribuído.
Para retornar o valor, além de precisarmos saber a chave que você quer, tem que colocar dois
pontos no incio da chave.

Condicionais
If, Else, ElsIf, Unless, Case
If,Else e o ElsIf(elseif), padrão de todas as linguagens,
Unless é quando a condição é falsa, e o Case é uma associação de ifs, checar varias condições

Iteração
For, While, Times, Do/While(loop)
For, While e Do/While(loop), padrão de outras linguagens
Times Executa uma repetição por um determinado número de vezes

Collections
São conjuntos agrupados, coleções, e temos dois tipos pricipais, Array e Hashs, a diferença entre 
eles é que o Hash é muito semelhante a um objeto json, passando uma chave e valor

Iterações
Temos 3 principais métodos:
EACH - semelhante ao for, porém não sobrescreve o valor das estruturas
MAP - cria outro array, baseado no que já Existe
SELECT - selecionar um ou mais valores dentro de um array, seguindo uma condição

Métodos e GEMS
Métodos são formas de organizar instruções de um programa, utilizamos a palavra reservada
'def'
GEM - é um pacote de funcionalidades a ffim de resolver necessidades específicas de um programa
em Ruby, semelhante a frameworks e libs em outras linguagens
# para instalar uma gem, usamos o comando (gem install _____)
# para desinstalar uma gem, usamos o comando (gem uninstall _____)
# para listar as gem, usamos o comando (gem list)
# gem bundle, ele controla, procura e instala gems
Dentro de um projeto podemos criar um arquivo GemFile, e colocar as dependencias, então com o bundle
ele já instala tudo que estiver nesse arquivo, podemos encontar várias gems em:
(https://rubygems.org/)

POO
Orientação à Objetos, aqui podemos criar aplicações dentro desse paradigma de programação.
Para criar classes utilizamos a palavra reservada 'class', e para Instanciar utlizamos o nome da classe 
que criamos seguido de '.new', como por exemplo { animal = Animal.new }
Para utilizarmos herança usamos o operador '<' após o nome da classe exemplo { class Cachorro < Animal }
Para o uso do polimorfismo, só herdar de uma outra classe e criar um método com o mesmo nome da classe pai,
e podemos utilizar a palavra reservada 'super', para ainda assim executar o que esta no método da classe pai.
Para utilizar classes dentro de outros arquivos, podemos utilizar a palavra reservada 
'require' ou 'require_relative', casos de dependencia entre classes, é importante colocar na ordem os requires

Variáveis (declaração)
variavel local - minuscula e ou começando com sublinhado
variavel global - com o require e começando com o $
variavel de classe - começando com @@
variavel de intancia - começa com o símbolo @

















